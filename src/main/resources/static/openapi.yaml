openapi: 3.0.3
info:
  title: Plannary API Documentation
  description: |
    ## 주요 기능
    - 사용자 인증 및 JWT 토큰 기반 인가
    - 소셜 로그인 (Google, Kakao, Apple, Naver)
    - 할일 및 서브 할일 관리
    - 할일 그룹 관리
    - 할일 아이콘 관리
    
    ## 인증 방법
    대부분의 API는 JWT Bearer Token을 통한 인증이 필요합니다.
    로그인 후 받은 accessToken을 Authorization 헤더에 'Bearer {token}' 형식으로 전달하세요.
    
    ## API 버전
    현재 API 버전: v1.0.0
  version: 1.0.0
  contact:
    email: ganadara3125@gmail.com

servers:
  - url: http://localhost:8080
    description: 개발 서버
  - url: https://api.gava.com
    description: 운영 서버

security:
  - Bearer: []

components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: '아래 로그인 후 얻은 JWT 토큰(accessToken)을 입력하세요. 예: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 사용자 이름
          example: testuser
          minLength: 1
          maxLength: 255
        password:
          type: string
          format: password
          description: 사용자 비밀번호
          example: password123
          minLength: 1
          maxLength: 255

    TokenResponse:
      type: object
      properties:
        tokenType:
          type: string
          description: 토큰 타입 (항상 'Bearer')
          example: Bearer
          default: Bearer
        accessToken:
          type: string
          description: JWT 액세스 토큰 - API 요청시 Authorization 헤더에 사용
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT 리프레시 토큰 - 액세스 토큰 갱신시 사용
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expirationTime:
          type: integer
          format: int64
          description: 액세스 토큰 만료 시간 (Unix timestamp, 밀리초)
          example: 1736089200000

    SignupRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 사용자 이름 (영문, 숫자, 한글만 허용)
          example: 홍길동123
          pattern: "^[a-zA-Z0-9가-힣]*$"
          minLength: 1
          maxLength: 255
        password:
          type: string
          format: password
          description: 사용자 비밀번호 (영문, 숫자, 특수문자만 허용)
          example: mySecurePassword123!@#
          pattern: "^[a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};':\",.<>?/]*$"
          minLength: 1
          maxLength: 255

    RefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT 리프레시 토큰
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          minLength: 1

    SocialLoginRequest:
      type: object
      required:
        - provider
        - token
      properties:
        provider:
          type: string
          description: 소셜 로그인 제공자
          example: google
          enum: [google, kakao, apple, naver]
        token:
          type: string
          description: 소셜 플랫폼에서 발급받은 토큰
          example: eyJhbGciOiJSUzI1NiIsImtpZCI6IjdkYzAyY2Y5...
          minLength: 1

    CreateTodoRequest:
      type: object
      required:
        - name
        - date
      properties:
        name:
          type: string
          description: 할일 제목
          example: 프로젝트 회의
          minLength: 1
          maxLength: 255
        iconId:
          type: integer
          format: int64
          description: 할일과 연결할 아이콘 ID (선택사항)
          example: 1
          minimum: 1
        isImportant:
          type: boolean
          description: 중요 여부
          example: false
          default: false
        isCompleted:
          type: boolean
          description: 완료 여부
          example: false
          default: false
        date:
          type: string
          format: date
          description: 할일 날짜 (ISO-8601 형식)
          example: "2025-01-10"
        startTime:
          type: string
          format: time
          description: 시작 시간 (ISO-8601 형식, 선택사항)
          example: "14:00:00"
        dueTime:
          type: string
          format: time
          description: 종료 시간 (ISO-8601 형식, 선택사항)
          example: "16:00:00"
        alarmDateTime:
          type: string
          format: date-time
          description: 알람 시각 (ISO-8601 형식, 선택사항)
          example: "2025-01-10T13:30:00"
        groups:
          type: array
          items:
            type: integer
            format: int64
          description: 할일을 포함할 그룹 ID 목록
          example: [1, 2]
        color:
          type: string
          description: 할일 색상 (HEX 색상 코드, 선택사항)
          example: "#FF5733"
          pattern: "^#[0-9A-Fa-f]{6}$"
        subTodos:
          type: array
          items:
            $ref: '#/components/schemas/CreateSubTodoRequest'
          description: 서브 할일 목록

    CreateSubTodoRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: 서브 할일 제목
          example: 회의 자료 준비
          minLength: 1
          maxLength: 255
        startTime:
          type: string
          format: time
          description: 시작 시간 (ISO-8601 형식, 선택사항)
          example: "14:00:00"
        dueTime:
          type: string
          format: time
          description: 종료 시간 (ISO-8601 형식, 선택사항)
          example: "15:00:00"
        isCompleted:
          type: boolean
          description: 완료 여부
          example: false
          default: false

    TodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 할일 ID
          example: 1
        name:
          type: string
          description: 할일 제목
          example: 프로젝트 회의
        date:
          type: string
          format: date
          description: 할일 날짜
          example: "2025-01-10"
        startTime:
          type: string
          format: time
          description: 시작 시간
          example: "14:00:00"
        dueTime:
          type: string
          format: time
          description: 종료 시간
          example: "16:00:00"
        color:
          type: string
          description: 할일 색상 (HEX 색상 코드)
          example: "#FF5733"
        alarmDateTime:
          type: string
          format: date-time
          description: 알람 시각
          example: "2025-01-10T13:30:00"
        isImportant:
          type: boolean
          description: 중요 여부
          example: true
        isCompleted:
          type: boolean
          description: 완료 여부
          example: false
        icon:
          $ref: '#/components/schemas/TodoIconResponse'
        subTodos:
          type: array
          items:
            $ref: '#/components/schemas/SubTodoResponse'
          description: 서브 할일 목록
        groups:
          type: array
          items:
            $ref: '#/components/schemas/TodoGroupResponse'
          description: 할일이 속한 그룹 목록

    SubTodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 서브 할일 ID
          example: 1
        name:
          type: string
          description: 서브 할일 제목
          example: 회의 자료 준비
        startTime:
          type: string
          format: time
          description: 시작 시간
          example: "14:00:00"
        dueTime:
          type: string
          format: time
          description: 종료 시간
          example: "15:00:00"
        isCompleted:
          type: boolean
          description: 완료 여부
          example: false

    CreateTodoGroupRequest:
      type: object
      required:
        - name
        - color
      properties:
        name:
          type: string
          description: 그룹 이름
          example: 업무
          minLength: 1
          maxLength: 255
        color:
          type: string
          description: 그룹 색상 (HEX 색상 코드)
          example: "#3498DB"
          pattern: "^#[0-9A-Fa-f]{6}$"

    TodoGroupResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 그룹 ID
          example: 1
        name:
          type: string
          description: 그룹 이름
          example: 업무
        color:
          type: string
          description: 그룹 색상 (HEX 색상 코드)
          example: "#3498DB"

    TodoIconResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 아이콘 ID
          example: 1
        name:
          type: string
          description: 아이콘 이름
          example: meeting
        contentType:
          type: string
          description: 아이콘 파일 형식
          example: image/png

    UserInfoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 사용자 ID
          example: 1
        username:
          type: string
          description: 사용자 이름
          example: 홍길동123
        roles:
          type: array
          items:
            type: string
          description: 사용자 권한 목록
          example: ["ROLE_USER"]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 에러 메시지
          example: Bad Request
        message:
          type: string
          description: 상세 에러 메시지
          example: 유효성 검사 실패

paths:
  /api/auth/login:
    post:
      tags:
        - 인증 API
      summary: 사용자 로그인
      description: |
        사용자명과 비밀번호를 통해 로그인을 수행합니다.
        성공시 JWT 액세스 토큰과 리프레시 토큰을 반환합니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              login_example:
                summary: 로그인 예시
                value:
                  username: testuser
                  password: password123!@#
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: 잘못된 요청 (유효성 검사 실패)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패 (잘못된 사용자명 또는 비밀번호)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      tags:
        - 인증 API
      summary: 토큰 갱신
      description: |
        리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급받습니다.
        액세스 토큰이 만료되었을 때 사용합니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: 잘못된 요청 (유효성 검사 실패)
        '401':
          description: 인증 실패 (유효하지 않은 리프레시 토큰)

  /api/auth/social/login:
    post:
      tags:
        - 소셜 인증 API
      summary: 소셜 로그인
      description: |
        소셜 플랫폼(Google, Kakao, Apple, Naver)을 통한 로그인을 수행합니다.
        각 플랫폼에서 받은 토큰을 사용하여 인증하고, JWT 토큰을 발급합니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
            examples:
              google_login:
                summary: Google 로그인
                value:
                  provider: google
                  token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjdkYzAyY...
              kakao_login:
                summary: Kakao 로그인
                value:
                  provider: kakao
                  token: BearerKakaoAK-yJ4ac7O4qxdTGdNXESIppo9_IjqjKKoqUPXuFz...
      responses:
        '200':
          description: 소셜 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 실패
        '500':
          description: 소셜 플랫폼 연동 오류

  /api/users/signup:
    post:
      tags:
        - 사용자 API
      summary: 사용자 회원가입
      description: |
        새로운 사용자 계정을 생성합니다.
        사용자명은 고유해야 하며, 영문, 숫자, 한글만 허용됩니다.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            examples:
              signup_example:
                summary: 회원가입 예시
                value:
                  username: testuser
                  password: password123!@#
      responses:
        '201':
          description: 회원가입 성공
        '400':
          description: 잘못된 요청 (유효성 검사 실패)
        '409':
          description: 중복된 사용자명

  /api/todos:
    post:
      tags:
        - 할일 API
      summary: 할일 생성
      description: |
        새로운 할일을 생성합니다.
        할일은 제목, 날짜, 시간, 아이콘, 그룹, 서브 할일 등을 포함할 수 있습니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
            examples:
              simple_todo:
                summary: 단순한 할일
                value:
                  name: 프로젝트 회의
                  date: "2025-01-10"
                  isImportant: false
                  isCompleted: false
              detailed_todo:
                summary: 상세한 할일
                value:
                  name: 중요한 프레젠테이션
                  date: "2025-01-15"
                  startTime: "14:00:00"
                  dueTime: "16:00:00"
                  isImportant: true
                  iconId: 1
                  groups: [1, 2]
                  color: "#FF5733"
                  alarmDateTime: "2025-01-15T13:30:00"
                  subTodos:
                    - name: 슬라이드 준비
                      startTime: "14:00:00"
                      dueTime: "15:00:00"
                      isCompleted: false
      responses:
        '200':
          description: 할일 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 실패

    get:
      tags:
        - 할일 API
      summary: 할일 목록 조회
      description: |
        현재 사용자의 할일 목록을 조회합니다.
        다양한 필터링 옵션을 사용할 수 있습니다.
      parameters:
        - name: date
          in: query
          description: 조회할 날짜 (ISO-8601 형식)
          schema:
            type: string
            format: date
          example: "2025-01-10"
        - name: groupId
          in: query
          description: 조회할 그룹 ID
          schema:
            type: integer
            format: int64
          example: 1
        - name: done
          in: query
          description: 완료 상태 필터
          schema:
            type: boolean
          example: false
      responses:
        '200':
          description: 할일 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'
        '401':
          description: 인증 실패

  /api/todos/{id}/done:
    patch:
      tags:
        - 할일 API
      summary: 할일 완료 처리
      description: 할일을 완료 상태로 변경합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 완료 처리할 할일 ID
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          description: 할일 완료 처리 성공
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음
        '404':
          description: 할일을 찾을 수 없음

  /api/todos/{id}:
    delete:
      tags:
        - 할일 API
      summary: 할일 삭제
      description: 지정된 할일을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 할일 ID
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          description: 할일 삭제 성공
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음

  /api/todos/sub-todo/{id}:
    put:
      tags:
        - 할일 API
      summary: 서브 할일 수정
      description: 기존 서브 할일의 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 서브 할일 ID
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubTodoRequest'
      responses:
        '200':
          description: 서브 할일 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubTodoResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음
        '404':
          description: 서브 할일을 찾을 수 없음

  /api/todo-groups:
    post:
      tags:
        - 할일 그룹 API
      summary: 할일 그룹 생성
      description: 새로운 할일 그룹을 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoGroupRequest'
            examples:
              group_example:
                summary: 그룹 생성 예시
                value:
                  name: 업무
                  color: "#3498DB"
      responses:
        '200':
          description: 할일 그룹 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGroupResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 실패

    get:
      tags:
        - 할일 그룹 API
      summary: 할일 그룹 목록 조회
      description: 현재 사용자의 모든 할일 그룹을 조회합니다.
      responses:
        '200':
          description: 할일 그룹 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoGroupResponse'
        '401':
          description: 인증 실패

  /api/todo-groups/{id}:
    get:
      tags:
        - 할일 그룹 API
      summary: 할일 그룹 상세 조회
      description: 지정된 ID의 할일 그룹 상세 정보를 조회합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 조회할 할일 그룹 ID
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: 할일 그룹 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGroupResponse'
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음
        '404':
          description: 할일 그룹을 찾을 수 없음

    put:
      tags:
        - 할일 그룹 API
      summary: 할일 그룹 수정
      description: 기존 할일 그룹의 정보를 수정합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 할일 그룹 ID
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoGroupRequest'
      responses:
        '200':
          description: 할일 그룹 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoGroupResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음
        '404':
          description: 할일 그룹을 찾을 수 없음

    delete:
      tags:
        - 할일 그룹 API
      summary: 할일 그룹 삭제
      description: 지정된 할일 그룹을 삭제합니다.
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 할일 그룹 ID
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          description: 할일 그룹 삭제 성공
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음

  /api/todo-icons:
    post:
      tags:
        - 할일 아이콘 API
      summary: 할일 아이콘 생성 (관리자 전용)
      description: |
        새로운 할일 아이콘을 생성합니다.
        이 API는 관리자 권한이 있는 사용자만 사용할 수 있습니다.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 아이콘 이름
                  example: meeting
                file:
                  type: string
                  format: binary
                  description: 아이콘 파일
      responses:
        '200':
          description: 아이콘 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoIconResponse'
        '400':
          description: 잘못된 요청
        '401':
          description: 인증 실패
        '403':
          description: 권한 없음 (ADMIN 권한 필요)
        '409':
          description: 중복된 아이콘 이름

    get:
      tags:
        - 할일 아이콘 API
      summary: 할일 아이콘 목록 조회
      description: 등록된 모든 할일 아이콘의 목록을 조회합니다.
      security: []
      responses:
        '200':
          description: 아이콘 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoIconResponse'

  /api/todo-icons/{id}:
    get:
      tags:
        - 할일 아이콘 API
      summary: 할일 아이콘 상세 조회
      description: 지정된 ID의 할일 아이콘 정보를 조회합니다.
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: 조회할 아이콘 ID
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: 아이콘 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoIconResponse'
        '404':
          description: 아이콘을 찾을 수 없음

  /api/todo-icons/{id}/data:
    get:
      tags:
        - 할일 아이콘 API
      summary: 할일 아이콘 이미지 데이터 조회
      description: 지정된 ID의 아이콘 실제 이미지 데이터를 반환합니다.
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: 이미지를 조회할 아이콘 ID
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: 아이콘 이미지 데이터 반환 성공
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: 아이콘을 찾을 수 없음 